var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c="function"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error("Cannot find module '"+i+"'");throw a.code="MODULE_NOT_FOUND",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u="function"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/**This class is automatically generated by LayaAirIDE, please do not make any modifications. */
var NetTest_1 = require("./script/NetTest");
/*
* 游戏初始化配置;
*/
var GameConfig = /** @class */ (function () {
    function GameConfig() {
    }
    GameConfig.init = function () {
        var reg = Laya.ClassUtils.regClass;
        reg("script/NetTest.ts", NetTest_1.default);
    };
    GameConfig.width = 1136;
    GameConfig.height = 640;
    GameConfig.scaleMode = "showall";
    GameConfig.screenMode = "horizontal";
    GameConfig.alignV = "top";
    GameConfig.alignH = "left";
    GameConfig.startScene = "test/main.scene";
    GameConfig.sceneRoot = "";
    GameConfig.debug = false;
    GameConfig.stat = true;
    GameConfig.physicsDebug = true;
    GameConfig.exportSceneToJson = true;
    return GameConfig;
}());
exports.default = GameConfig;
GameConfig.init();
},{"./script/NetTest":3}],2:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var GameConfig_1 = require("./GameConfig");
var Main = /** @class */ (function () {
    function Main() {
        //根据IDE设置初始化引擎		
        if (window["Laya3D"])
            Laya3D.init(GameConfig_1.default.width, GameConfig_1.default.height);
        else
            Laya.init(GameConfig_1.default.width, GameConfig_1.default.height, Laya["WebGL"]);
        Laya["Physics"] && Laya["Physics"].enable();
        Laya["DebugPanel"] && Laya["DebugPanel"].enable();
        Laya.stage.scaleMode = "all";
        Laya.stage.screenMode = GameConfig_1.default.screenMode;
        //兼容微信不支持加载scene后缀场景
        Laya.URL.exportSceneToJson = GameConfig_1.default.exportSceneToJson;
        //打开调试面板（通过IDE设置调试模式，或者url地址增加debug=true参数，均可打开调试面板）
        if (GameConfig_1.default.debug || Laya.Utils.getQueryString("debug") == "true")
            Laya.enableDebugPanel();
        if (GameConfig_1.default.physicsDebug && Laya["PhysicsDebugDraw"])
            Laya["PhysicsDebugDraw"].enable();
        if (GameConfig_1.default.stat)
            Laya.Stat.show();
        Laya.alertGlobalError = true;
        //激活资源版本控制，version.json由IDE发布功能自动生成，如果没有也不影响后续流程
        Laya.ResourceVersion.enable("version.json", Laya.Handler.create(this, this.onVersionLoaded), Laya.ResourceVersion.FILENAME_VERSION);
    }
    Main.prototype.onVersionLoaded = function () {
        //激活大小图映射，加载小图的时候，如果发现小图在大图合集里面，则优先加载大图合集，而不是小图
        Laya.AtlasInfoManager.enable("fileconfig.json", Laya.Handler.create(this, this.onConfigLoaded));
    };
    Main.prototype.onConfigLoaded = function () {
        //加载IDE指定的场景
        GameConfig_1.default.startScene && Laya.Scene.open(GameConfig_1.default.startScene);
    };
    return Main;
}());
//激活启动类
new Main();
},{"./GameConfig":1}],3:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var Event = Laya.Event;
var Socket = Laya.Socket;
var Byte = Laya.Byte;
var layaMaxUI_1 = require("../ui/layaMaxUI");
var NetTest = /** @class */ (function (_super) {
    __extends(NetTest, _super);
    function NetTest() {
        var _this = _super.call(this) || this;
        _this.btn_ConnectServer.on(Event.CLICK, _this, _this.connectToServer);
        _this.btn_CloseConnect.on(Event.CLICK, _this, _this.Close);
        _this.btn_Send.on(Event.CLICK, _this, _this.sendMessage);
        _this.btn_Login.on(Event.CLICK, _this, function () {
            this.messageType.text = "2";
            this.onChangeInput('{"Account":"zllang1"}');
        });
        _this.btn_Room.on(Event.CLICK, _this, function () {
            this.messageType.text = "2";
            this.onChangeInput('{"UID":123}');
        });
        return _this;
    }
    //连接服务器
    NetTest.prototype.connectToServer = function () {
        this.socket = new Socket();
        this.socket.connectByUrl(this.addr.text);
        this.output = this.socket.output;
        this.socket.on(Event.OPEN, this, this.onSocketOpen);
        this.socket.on(Event.CLOSE, this, this.onSocketClose);
        this.socket.on(Event.MESSAGE, this, this.onMessageReveived);
        this.socket.on(Event.ERROR, this, this.onConnectError);
    };
    NetTest.prototype.onSocketOpen = function () {
        console.log("Connected");
        this.Log("连接服务器成功");
    };
    NetTest.prototype.sendMessage = function () {
        // 使用output.writeByte发送
        var message = this.content.text;
        if (message == "") {
            alert("message can not be empty");
        }
        var mid = parseInt(this.messageType.text);
        var by = new Byte();
        by.endian = Byte.BIG_ENDIAN;
        by.writeUint32(mid);
        for (var i = 0; i < message.length; ++i) {
            by.writeByte(message.charCodeAt(i));
        }
        this.socket.send(by.buffer);
    };
    NetTest.prototype.onMessageReveived = function (message) {
        console.log("Message from server:");
        if (typeof message == "string") {
            this.Log(message);
        }
        else if (message instanceof ArrayBuffer) {
            var by = new Byte(message);
            var messageID = by.readUint32();
            var str = by.readUTFString();
            this.Log('MessageID:${messageID} Message:${str}');
        }
        this.socket.input.clear();
    };
    NetTest.prototype.onChangeInput = function (str) {
        this.content.text = str;
    };
    NetTest.prototype.Close = function () {
        this.socket.close();
        this.Log("连接关闭");
    };
    NetTest.prototype.onSocketClose = function () {
        this.Log("连接关闭");
    };
    NetTest.prototype.onConnectError = function (e) {
        this.Log("连接错误");
    };
    NetTest.prototype.Log = function (str) {
        var time = new Date().toTimeString();
        this.log.text += (time + ": \n" + str + "\n");
        this.log.scrollTo(this.log.maxScrollY);
    };
    NetTest.prototype.onEnable = function () {
    };
    NetTest.prototype.onDisable = function () {
    };
    return NetTest;
}(layaMaxUI_1.ui.test.mainUI));
exports.default = NetTest;
},{"../ui/layaMaxUI":4}],4:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var Scene = Laya.Scene;
var ui;
(function (ui) {
    var test;
    (function (test) {
        var mainUI = /** @class */ (function (_super) {
            __extends(mainUI, _super);
            function mainUI() {
                return _super.call(this) || this;
            }
            mainUI.prototype.createChildren = function () {
                _super.prototype.createChildren.call(this);
                this.loadScene("test/main");
            };
            return mainUI;
        }(Scene));
        test.mainUI = mainUI;
    })(test = ui.test || (ui.test = {}));
})(ui = exports.ui || (exports.ui = {}));
},{}]},{},[2])
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
